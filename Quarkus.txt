Um einen Quarkus-Service zu erstellen, der die gewünschten Funktionen erfüllt, benötigen wir folgende Schritte:

1. **Setup des Quarkus-Projekts**: Wir erstellen ein neues Quarkus-Projekt.
2. **REST-Endpunkt für Firmware-Check**: Dieser Endpunkt empfängt Anfragen von FRITZ!Boxen und prüft, ob für die jeweilige Hardware-ID eine neue Firmware verfügbar ist.
3. **REST-Endpunkt zum Hochladen neuer Firmware-Informationen**: Dieser Endpunkt ermöglicht es, neue Firmware-Versionen in den Service zu laden und für zukünftige Anfragen zu speichern.
4. **Speicherung der Firmware-Informationen**: Für diesen Prototyp speichern wir die Firmware-Daten im Speicher. In einem realen Projekt würde eine Datenbank verwendet werden.

Hier ist ein Beispiel, wie dieser Quarkus-Service in Java aussehen könnte:

### 1. Projektstruktur und Setup
Erstelle ein neues Quarkus-Projekt:
```bash
mvn io.quarkus.platform:quarkus-maven-plugin:3.0.0.Final:create \
    -DprojectGroupId=org.example \
    -DprojectArtifactId=fritzbox-service \
    -DclassName="org.example.FirmwareResource" \
    -Dpath="/api/firmware"
cd fritzbox-service
```

### 2. Modell und Services

#### Firmware Model
```java
// src/main/java/org/example/model/FirmwareInfo.java
package org.example.model;

public class FirmwareInfo {
    private String hardwareId;
    private String version;
    private String downloadUrl;

    // Konstruktoren, Getter und Setter
    public FirmwareInfo() {}

    public FirmwareInfo(String hardwareId, String version, String downloadUrl) {
        this.hardwareId = hardwareId;
        this.version = version;
        this.downloadUrl = downloadUrl;
    }

    public String getHardwareId() { return hardwareId; }
    public void setHardwareId(String hardwareId) { this.hardwareId = hardwareId; }
    public String getVersion() { return version; }
    public void setVersion(String version) { this.version = version; }
    public String getDownloadUrl() { return downloadUrl; }
    public void setDownloadUrl(String downloadUrl) { this.downloadUrl = downloadUrl; }
}
```

#### Firmware Storage Service
```java
// src/main/java/org/example/service/FirmwareService.java
package org.example.service;

import org.example.model.FirmwareInfo;
import javax.enterprise.context.ApplicationScoped;
import java.util.HashMap;
import java.util.Map;

@ApplicationScoped
public class FirmwareService {
    private Map<String, FirmwareInfo> firmwareStorage = new HashMap<>();

    public void addFirmware(FirmwareInfo firmwareInfo) {
        firmwareStorage.put(firmwareInfo.getHardwareId(), firmwareInfo);
    }

    public FirmwareInfo getFirmwareForHardware(String hardwareId) {
        return firmwareStorage.get(hardwareId);
    }
}
```

### 3. REST-Endpunkte

#### Endpunkt für Firmware-Check
Dieser Endpunkt erhält eine Anfrage von der FRITZ!Box und prüft, ob für die jeweilige Hardware-ID eine neue Firmware verfügbar ist.

```java
// src/main/java/org/example/FirmwareResource.java
package org.example;

import org.example.model.FirmwareInfo;
import org.example.service.FirmwareService;

import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.Map;

@Path("/api/firmware")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class FirmwareResource {

    @Inject
    FirmwareService firmwareService;

    // Endpunkt, um Firmware-Updates zu prüfen
    @POST
    @Path("/check")
    public Response checkFirmware(Map<String, String> request) {
        String hardwareId = request.get("hardwareId");
        String currentVersion = request.get("currentVersion");

        FirmwareInfo availableFirmware = firmwareService.getFirmwareForHardware(hardwareId);

        if (availableFirmware == null || availableFirmware.getVersion().equals(currentVersion)) {
            return Response.ok(Map.of("updateAvailable", false)).build();
        }

        return Response.ok(Map.of(
                "updateAvailable", true,
                "newVersion", availableFirmware.getVersion(),
                "downloadUrl", availableFirmware.getDownloadUrl()
        )).build();
    }

    // Endpunkt, um neue Firmware-Versionen hinzuzufügen
    @POST
    @Path("/upload")
    public Response uploadFirmware(FirmwareInfo firmwareInfo) {
        firmwareService.addFirmware(firmwareInfo);
        return Response.ok(Map.of("status", "Firmware added")).build();
    }
}
```

### 4. Anwendung starten und testen
Zum Starten der Anwendung:
```bash
./mvnw quarkus:dev
```

### 5. Beispielanfragen

#### Anfrage an den `/check`-Endpunkt
Überprüfen, ob ein Firmware-Update verfügbar ist:
```bash
curl -X POST http://localhost:8080/api/firmware/check \
  -H "Content-Type: application/json" \
  -d '{"hardwareId": "fritzbox-7590", "currentVersion": "7.20"}'
```

#### Hochladen einer neuen Firmware mit dem `/upload`-Endpunkt
Eine neue Firmware-Version hochladen:
```bash
curl -X POST http://localhost:8080/api/firmware/upload \
  -H "Content-Type: application/json" \
  -d '{"hardwareId": "fritzbox-7590", "version": "7.21", "downloadUrl": "http://example.com/firmware/7590-7.21.bin"}'
```

Mit diesem Setup kann der Quarkus-Service Firmware-Updates für FRITZ!Boxen verwalten und abfragen.